import React, {useCallback, useState} from 'react';
import {
  Alert,
  ImageBackground,
  KeyboardAvoidingView,
  Linking,
  Platform,
  SafeAreaView,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  View,
} from 'react-native';
import {
  ButtonComponent,
  InputComponent,
  LoadingComponent,
  RowComponent,
  SectionComponent,
  Space,
  TextComponent,
} from '../../atoms';
import {appColors} from '../../../constants/colors';
import {fontFamilies} from '../../../constants/fontFamilies';
import {ModalComponent} from '../../organisms';
import {Controller, useForm} from 'react-hook-form';
import {regexPattern} from '../../../constants/regex';
import {loginServices} from '../../../services/Login/loginServices';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {useFocusEffect, useNavigation} from '@react-navigation/native';
import {startRefreshTokenTimer} from './TokenTimer';
import {useDispatch, useSelector} from 'react-redux';
import ShipperServices from '../../../services/Shipper/shipperServices';
import {StatusBar} from 'react-native';
import {setUserInfo} from '../../../store/userSlice.js';

const platForm = Platform.OS == 'ios' ? 'ios' : 'android';
const LoginScreen = () => {
  useFocusEffect(
    useCallback(() => {
      StatusBar.setBarStyle('light-content');
      StatusBar.setBackgroundColor(appColors.primary);
    }, []),
  );

  const {
    control,
    handleSubmit,
    formState: {errors},
    trigger,
  } = useForm();
  const {navigate} = useNavigation();
  const [isLoading, setIsLoading] = useState(false);
  const [isShowModal, setIsShowModal] = useState(false);
  const [descripttion, setDescripttion] = useState('');

  const dispatch = useDispatch();
  const shipperLocation = useSelector(state => state.user.location);

  // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa Shipper v√† ƒë·∫©y l√™n BE
  const handlePushLocation = async () => {
    try {
      const res = await ShipperServices.updateShipper({
        location: shipperLocation,
      });
      console.log('Update Shipper Info ü•∑', res);

      // Ch·ªâ l∆∞u th√¥ng tin shipper sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
      dispatch(setUserInfo(res));
    } catch (error) {
      console.log('error when update location of shipper to server', error);
    }
  };

  // X·ª≠ l√Ω tr·∫£ v·ªÅ th√¥ng b√°o d·ª±a theo l·ªói
  const handleReturnMessage = error => {
    switch (error.statusCode) {
      case 401:
        return setDescripttion(
          'B·∫°n ƒë√£ nh·∫≠p sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p.',
        );
      case 403:
        return setDescripttion(
          'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá ƒë·∫øn admin ƒë·ªÉ ƒë∆∞·ª£c m·ªü l·∫°i t√†i kho·∫£n.',
        );
      case 422:
        return setDescripttion('M√¢Ã£t kh√¢Ãâu t·ªëi thi·ªÉu 6 k√Ω t·ª±');
      default:
        return setDescripttion('ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  };

  //  X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
  const onSubmit = async data => {
    try {
      setIsLoading(true);
      console.log('data', data);

      // L·∫•y fcmToken t·ª´ AsyncStorage
      const fcmToken = await AsyncStorage.getItem('fcmToken');

      // G·ª≠i th√¥ng tin ƒëƒÉng nh·∫≠p c√πng v·ªõi fcmToken
      const res = await loginServices.login({
        ...data,
        fcmToken,
      });

      console.log('res', res);
      const {accessToken, expires, refreshToken} = res;
      if (accessToken) {
        await AsyncStorage.setItem('shipper_token', accessToken);
        await AsyncStorage.setItem('shipper_refresh_token', refreshToken);
        await AsyncStorage.setItem('expires', expires.toString());

        // B·∫Øt ƒë·∫ßu timer ƒë·ªÉ refresh token t·ª± ƒë·ªông tr∆∞·ªõc khi h·∫øt h·∫°n
        startRefreshTokenTimer(Number(expires), async () => {
          const newAccessToken = await loginServices.refreshToken();
          console.log('newAccessToken', newAccessToken);
          const newExpires = await AsyncStorage.getItem('expires');
          startRefreshTokenTimer(
            Number(newExpires),
            loginServices.refreshToken,
          );
        });

        // c·∫≠p nh·∫≠t v·ªã tr√≠ shipper l√™n BE
        handlePushLocation();
        setIsLoading(false);
        navigate('Main');
      } else {
        setIsShowModal(true);
        setIsLoading(false);
      }
    } catch (error) {
      console.log('error login ‚ùå‚ùå', error);
      setIsLoading(false);
      handleReturnMessage(error);
      setIsShowModal(true);
    }
  };

  // ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
  const handleRegisterPress = () => {
    Linking.openURL(`tel:0969415864`);
  };

  return (
    <SafeAreaView style={{flex: 1}}>
      <ImageBackground
        source={require('../../../assets/images/SplashScreen.png')}
        style={{
          flex: 0.8,
          justifyContent: 'center',
          alignItems: 'center',
        }}
        imageStyle={{flex: 1}}></ImageBackground>
      <SectionComponent styles={[styles.container]}>
        <ScrollView>
          <KeyboardAvoidingView>
            {/* ƒêƒÉng nh·∫≠p */}
            <RowComponent
              flexDirection="column"
              alignItems="flex-start"
              justify="flex-start"
              styles={{padding: 25, paddingBottom: 0, marginTop: 15}}>
              <TextComponent text={'ƒêƒÉng nh·∫≠p'} title={true} size={24} />
              <Space height={15} />

              {/* S·ªë ƒëi·ªán tho·∫°i */}
              <TextComponent
                text={'S·ªë ƒëi·ªán tho·∫°i'}
                font={fontFamilies.medium}
              />
              <Controller
                control={control}
                name="phone"
                rules={{
                  required: 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc',
                  pattern: {
                    value: regexPattern.phone,
                    message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá',
                  },
                }}
                render={({field: {onChange, onBlur, value}}) => (
                  <>
                    <InputComponent
                      value={value}
                      allowClear={true}
                      placeHolder={'Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i'}
                      onChange={e => {
                        onChange(e);
                        trigger('phone');
                      }}
                    />
                    {errors.phone && (
                      <TextComponent text={errors.phone.message} color="red" />
                    )}
                  </>
                )}
              />
              <Space height={5} />

              {/* M·∫≠t kh·∫©u */}
              <TextComponent text={'M·∫≠t kh·∫©u'} font={fontFamilies.medium} />
              <Controller
                control={control}
                name="password"
                rules={{required: 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc'}}
                render={({field: {onChange, onBlur, value}}) => (
                  <>
                    <InputComponent
                      value={value}
                      placeHolder={'Nh·∫≠p m·∫≠t kh·∫©u'}
                      isPassWord={true}
                      onChange={e => {
                        onChange(e);
                        trigger('password');
                      }}
                    />
                    {errors.password && (
                      <TextComponent
                        text={errors.password.message}
                        color="red"
                      />
                    )}
                  </>
                )}
              />
            </RowComponent>

            {/* ƒêƒÉng nh·∫≠p button */}
            <SectionComponent
              styles={{
                width: '100%',
                paddingHorizontal: 20,
              }}>
              <ButtonComponent
                type="primary"
                title="ƒêƒÉng nh·∫≠p"
                onPress={handleSubmit(onSubmit)}
              />
            </SectionComponent>

            {platForm === 'ios' ? <Space height={30} /> : <Space height={50} />}

            {/* ƒêƒÉng k√≠ */}
            <ButtonComponent
              type="empty"
              title="ƒêƒÉng k√≠ t√†i kho·∫£n m·ªõi"
              textStyle={{color: appColors.primary}}
              onPress={handleRegisterPress}
            />
          </KeyboardAvoidingView>
        </ScrollView>
      </SectionComponent>

      <ModalComponent
        visible={isShowModal}
        okTitle={'ƒê√≥ng th√¥ng b√°o'}
        title={'Kh√¥ng ƒëƒÉng nh·∫≠p ƒë∆∞·ª£c'}
        descripttion={
          descripttion ??
          'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá ƒë·∫øn admin ƒë·ªÉ ƒë∆∞·ª£c m·ªü l·∫°i t√†i kho·∫£n.'
        }
        descripttionStyle={{
          textAlign: 'center',
          justifyContent: 'center',
        }}
        onOk={() => setIsShowModal(false)}
      />

      <LoadingComponent visible={isLoading} isTransparent={true} />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: appColors.white,
    marginTop: 0,
    position: 'static',
  },
});

export default LoginScreen;
